{"version":3,"file":"component---src-pages-index-tsx-5b2a2a21b3e33bfa9fdc.js","mappings":"wOA4BA,MAzBqBA,IAAoC,IAAnC,KAACC,GAA4BD,EAC/C,MAAM,GAACE,EAAE,YAAEC,GAAeF,EAC1B,OACIG,EAAAA,cAAA,MAAIC,IAAKH,EAAII,UAAU,QACnBF,EAAAA,cAAA,WAASE,UAAU,mEACfF,EAAAA,cAAA,WACIA,EAAAA,cAAA,KAAGE,UAAU,iDACRH,aAAW,EAAXA,EAAaI,OAGtBH,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAK,SAAQN,aAAW,EAAXA,EAAaO,UAAWJ,UAAU,2BACjDF,EAAAA,cAAA,WACIA,EAAAA,cAAA,MAAIE,UAAU,gFACTH,aAAW,EAAXA,EAAaQ,QAGtBP,EAAAA,cAAA,KAAGE,UAAU,kEACRH,aAAW,EAAXA,EAAaS,eAIzB,ECTb,MAXiBC,KACb,MAAMC,GCYCC,EAAAA,EAAAA,gBAAe,cDXtB,OACIX,EAAAA,cAAA,UAEQU,EAAKE,OAAOC,MAAMC,KAAKjB,GAAuBG,EAAAA,cAACe,EAAY,CAACd,IAAKJ,EAAKC,GAAID,KAAMA,MAEnF,E,UEyDb,MAzDYmB,KACR,MAAMN,GAAOC,EAAAA,EAAAA,gBAAe,eAsBtB,OAAEM,EAAM,OAAEC,GAAWR,EAAKS,KAAKC,aACrC,OACIpB,EAAAA,cAAA,OAAKE,UAAU,cACXF,EAAAA,cAACqB,EAAAA,EAAW,CACRC,MAAOZ,EAAKa,OAAOC,gBAAgBC,gBACnCC,IAAKT,EAAOU,KACZC,MAAO,CACHC,YAAa,EACbC,aAAc,EACdC,SAAU,GACVC,aAAe,QAEnBC,SAAU,CACND,aAAe,SAGvBhC,EAAAA,cAAA,OAAKE,UAAU,wBACXF,EAAAA,cAAA,OAAKE,UAAU,QAAO,cAAWF,EAAAA,cAAA,cAASiB,EAAOU,MAAc,IAAEV,EAAOiB,QAAQlC,EAAAA,cAAA,YAChFA,EAAAA,cAAA,YAAM,0BACNA,EAAAA,cAAA,KAAGmC,KAAO,uBAAsBjB,EAAOkB,UACpClC,UAAU,sBAAsBmC,OAAO,UAAS,WAE/C,OAEJrC,EAAAA,cAAA,KAAGmC,KAAO,sBAAqBjB,EAAOoB,SACnCpC,UAAU,sBAAsBmC,OAAO,UAAS,UAE/C,KAGN,E,UCrCd,MAlBuCE,IAE/BvC,EAAAA,cAACwC,EAAAA,EAAM,CAACC,UAAU,YACdzC,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKE,UAAU,iDACPF,EAAAA,cAAA,OAAKE,UAAU,8CACXF,EAAAA,cAAA,MAAIE,UAAU,8IACgC,YAC9CF,EAAAA,cAACgB,EAAG,QAGZhB,EAAAA,cAAC0C,EAAQ,MACT1C,EAAAA,cAAC2C,EAAAA,EAAM,QASpB,MAAMC,EAAOA,IAEZ5C,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,QAAM6C,KAAK,OACX7C,EAAAA,cAAA,QAAM8C,IAAI,aAAaX,KAAK,8EAC5BnC,EAAAA,cAAC+C,EAAAA,EAAG,CAACxC,MAAM,c","sources":["webpack://ppx-gatsby-blog/./src/components/BlogListItem.tsx","webpack://ppx-gatsby-blog/./src/components/BlogList.tsx","webpack://ppx-gatsby-blog/./src/lib/getPost.ts","webpack://ppx-gatsby-blog/./src/components/Bio.tsx","webpack://ppx-gatsby-blog/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\";\nimport {Link} from \"gatsby\";\n\nconst BlogListItem = ({node}: { node: Queries.Mdx }) => {\n    const {id, frontmatter} = node;\n    return (\n        <li key={id} className=\"py-4\">\n            <article className=\"space-y-2 xl:grid xl:grid-cols-4 xl:items-baseline xl:space-y-0\">\n                <div>\n                    <p className=\"text-base font-medium leading-6 text-teal-500\">\n                        {frontmatter?.date}\n                    </p>\n                </div>\n                <Link to={`/blog/${frontmatter?.queryId}`} className=\"space-y-3 xl:col-span-3\">\n                    <div>\n                        <h3 className=\"text-2xl font-bold leading-8 tracking-tight text-gray-900 dark:text-gray-100\">\n                            {frontmatter?.title}\n                        </h3>\n                    </div>\n                    <p className=\"prose max-w-none text-gray-500 dark:text-gray-400 line-clamp-2\">\n                        {frontmatter?.description}\n                    </p>\n                </Link>\n            </article>\n        </li>\n    );\n};\n\nexport default BlogListItem;","import * as React from \"react\";\nimport {getPostsData} from \"@src/lib/getPost\";\nimport BlogListItem from \"@src/components/BlogListItem\";\n\nconst BlogPage = () => {\n    const data = getPostsData();\n    return (\n        <ul>\n            {\n                data.allMdx.nodes.map((node: Queries.Mdx) => (<BlogListItem key={node.id} node={node}/>))\n            }\n        </ul>\n    );\n};\n\nexport default BlogPage;","import {graphql, useStaticQuery} from \"gatsby\";\n\n// const postsDir = path.join(process.cwd(), \"posts\");\n//\n// const getPostInfo = (fileName: string): matter.GrayMatterFile<string> => {\n//     // get .md file name\n//     const fileNameWithExt = fileName + \".md\";\n//\n//     // read md file as string\n//     const fullPath = path.join(postsDir, fileName, fileNameWithExt);\n//     const fileText = fs.readFileSync(fullPath, 'utf-8');\n//\n//     // parse the metadata part of md file, which  is in yaml format\n//     return matter(fileText);\n// };\n\nexport const getPostsData = () => {\n    return useStaticQuery(graphql\n        `query {\n        allMdx(sort: {frontmatter: {date: DESC}}) {\n            nodes {\n                frontmatter {\n                    date\n                    description\n                    title\n                    queryId\n                }\n                id\n            }\n        }\n    }`);\n};\n\n// export const getPostsContent = (fileName: string) => {\n//     const matterResult = getPostInfo(fileName);\n//\n//     // TODO: add tags ...\n//     const blogPostContent: BlogPostContent = {\n//         id: fileName,\n//         date: matterResult.data.date,\n//         title: matterResult.data.title,\n//         description: matterResult.data.description,\n//         content: matterResult.content\n//     };\n//     return blogPostContent;\n// };","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n    const data = useStaticQuery(graphql`\n    query {\n      avatar: file(absolutePath: { regex: \"/images/profile-pic.png/\" }) {\n          childImageSharp {\n            gatsbyImageData(layout: FIXED, width: 50)\n          }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n            github\n          }\n        }\n      }\n    }\n  `)\n\n    const { author, social } = data.site.siteMetadata\n    return (\n        <div className=\"flex mt-14\">\n            <GatsbyImage\n                image={data.avatar.childImageSharp.gatsbyImageData}\n                alt={author.name}\n                style={{\n                    marginRight: 5,\n                    marginBottom: 0,\n                    minWidth: 50,\n                    borderRadius: `100%`,\n                }}\n                imgStyle={{\n                    borderRadius: `50%`,\n                }}\n            />\n            <div className=\"ml-3 w-3/4 md:w-full\">\n                <div className=\"mb-3\">Written by <strong>{author.name}</strong> {author.summary}<br/></div>\n                <span>You can follow him on&nbsp;</span>\n                <a href={`https://twitter.com/${social.twitter}`}\n                   className=\"underline font-bold\" target=\"_blank\">\n                    Twitter\n                </a>\n                &nbsp;OR&nbsp;\n                <a href={`https://github.com/${social.github}`}\n                   className=\"underline font-bold\" target=\"_blank\">\n                    Github\n                </a>\n                .\n            </div>\n        </div>\n    )\n}\n\nexport default Bio\n","import * as React from \"react\";\nimport type {PageProps} from \"gatsby\";\nimport Layout from \"@src/components/layout\";\nimport Seo from \"@src/components/Seo\";\nimport BlogList from \"@src/components/BlogList\";\nimport Bio from \"@src/components/Bio\";\nimport Weather from \"@src/components/Footer/Weather\";\nimport Footer from \"@src/components/Footer/Footer\";\n\nconst IndexPage: React.FC<PageProps> = () => {\n    return (\n        <Layout pageTitle=\"mainpage\">\n            <main>\n                <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                        <div className=\"space-y-2 pt-6 pb-2 md:space-y-5 flex-none\">\n                            <h1 className=\"text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100\n                sm:text-4xl sm:leading-10 md:text-6xl md:leading-14 pb-4\">All Post</h1>\n                            <Bio />\n                        </div>\n                    </div>\n                    <BlogList/>\n                    <Footer />\n            </main>\n        </Layout>\n    );\n};\n\nexport default IndexPage;\n\n\nexport const Head = () => {\n    return (\n        <>\n            <html lang=\"en\" />\n            <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/qweather-icons@1.4.0/font/qweather-icons.css\"/>\n            <Seo title=\"Home Page\"/>\n        </>\n    )\n}\n"],"names":["_ref","node","id","frontmatter","React","key","className","date","Link","to","queryId","title","description","BlogPage","data","useStaticQuery","allMdx","nodes","map","BlogListItem","Bio","author","social","site","siteMetadata","GatsbyImage","image","avatar","childImageSharp","gatsbyImageData","alt","name","style","marginRight","marginBottom","minWidth","borderRadius","imgStyle","summary","href","twitter","target","github","IndexPage","Layout","pageTitle","BlogList","Footer","Head","lang","rel","Seo"],"sourceRoot":""}